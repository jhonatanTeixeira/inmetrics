services:
  zookeeper:
      image: confluentinc/cp-zookeeper:7.5.1
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.1
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    volumes:
      - ./ksqldb/daily_cash_flow.sql:/etc/ksql/daily_cash_flow.sql
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_QUERIES_FILE: /etc/ksql/daily_cash_flow.sql

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.1
    depends_on:
      - kafka
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  mongo-users:
    image: mongo
    environment:
      MONGO_INITDB_DATABASE: users
    deploy:
      resources:
        limits:
          cpus: '3'

  mongo-transactions:
    image: mongo
    environment:
      MONGO_INITDB_DATABASE: transactions
    deploy:
      resources:
        limits:
          cpus: '3'

  mongo-dailycashflow:
    image: mongo
    environment:
      MONGO_INITDB_DATABASE: dailycashflow
    deploy:
      resources:
        limits:
          cpus: '3'

  users-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: Users
    depends_on:
      - mongo-users
    environment:
      MongoConnectionString: mongodb://mongo-users:27017
      MongoDatabase: users
    restart: on-failure
    deploy:
      replicas: 1

  transactions-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: Transactions
    depends_on:
      - mongo-transactions
      - kafka
    environment:
      MongoConnectionString: mongodb://mongo-transactions:27017
      MongoDatabase: transactions
      KafkaServers: kafka:9092
    restart: on-failure
    deploy:
      replicas: 1

  dailycashflow-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: DailyCashFlow
    depends_on:
      - mongo-dailycashflow
    environment:
      MongoConnectionString: mongodb://mongo-dailycashflow:27017
      MongoDatabase: dailycashflow
    restart: on-failure
    deploy:
      replicas: 3

  dailycashflow-consumer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: DailyCashFlowConsumer
    depends_on:
      - mongo-dailycashflow
      - kafka
    environment:
      MongoConnectionString: mongodb://mongo-dailycashflow:27017
      MongoDatabase: dailycashflow
      KafkaConsumer__BootstrapServers: kafka:9092
      ThreadsPerCosnumer: 1
    restart: on-failure
    deploy:
      replicas: 1

  console:
    build:
      context: ./console
      dockerfile: Dockerfile
    environment:
      USERS_MONGO_URL: mongodb://mongo-users:27017
      TRANSACTIONS_MONGO_URL: mongodb://mongo-transactions:27017
      DAILY_CASH_FLOW_MONGO_URL: mongodb://mongo-dailycashflow:27017

  proxy:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    command: [nginx-debug, '-g', 'daemon off;']
    depends_on:
      - users-api
      - transactions-api
      - dailycashflow-api
      - signoz
    restart: on-failure

  # SIgNoz

  zookeeper-1:
    image: bitnami/zookeeper:3.7.1
    container_name: signoz-zookeeper-1
    hostname: zookeeper-1
    user: root
    # ports:
    #   - "2181:2181"
    #   - "2888:2888"
    #   - "3888:3888"
    environment:
      - ZOO_SERVER_ID=1
      # - ZOO_SERVERS=0.0.0.0:2888:3888,zookeeper-2:2888:3888,zookeeper-3:2888:3888
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_AUTOPURGE_INTERVAL=1

  clickhouse:
    image: clickhouse/clickhouse-server:23.7.3-alpine
    container_name: signoz-clickhouse
    # ports:
    # - "9000:9000"
    # - "8123:8123"
    tty: true
    volumes:
      - ./otel/clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ./otel/clickhouse-users.xml:/etc/clickhouse-server/users.xml
      - ./otel/custom-function.xml:/etc/clickhouse-server/custom-function.xml
      - ./otel/clickhouse-cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      # - ./clickhouse-storage.xml:/etc/clickhouse-server/config.d/storage.xml
      # - ./data/clickhouse/:/var/lib/clickhouse/
      - ./otel/user_scripts:/var/lib/clickhouse/user_scripts/
    restart: on-failure
    logging:
      options:
        max-size: 50m
        max-file: "3"
    healthcheck:
      # "clickhouse", "client", "-u ${CLICKHOUSE_USER}", "--password ${CLICKHOUSE_PASSWORD}", "-q 'SELECT 1'"
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "-q",
          "localhost:8123/ping"
        ]
      interval: 30s
      timeout: 5s
      retries: 3

  alertmanager:
    container_name: signoz-alertmanager
    image: signoz/alertmanager:0.23.4
    # volumes:
    #   - ./data/alertmanager:/data
    depends_on:
      query-service:
        condition: service_healthy
    restart: on-failure
    command:
      - --queryService.url=http://query-service:8085
      - --storage.path=/data

  otel-collector-migrator:
    image: signoz/signoz-schema-migrator:${OTELCOL_TAG:-0.88.9}
    container_name: otel-migrator
    command:
      - "--dsn=tcp://clickhouse:9000"
    depends_on:
      clickhouse:
        condition: service_healthy
      # clickhouse-2:
      #   condition: service_healthy
      # clickhouse-3:
      #   condition: service_healthy

  # Notes for Maintainers/Contributors who will change Line Numbers of Frontend & Query-Section. Please Update Line Numbers in `./scripts/commentLinesForSetup.sh` & `./CONTRIBUTING.md`
  otel-collector:
    container_name: signoz-otel-collector
    image: signoz/signoz-otel-collector:0.88.9
    command:
      [
        "--config=/etc/otel-collector-config.yaml",
        "--manager-config=/etc/manager-config.yaml",
        "--copy-path=/var/tmp/collector-config.yaml",
        "--feature-gates=-pkg.translator.prometheus.NormalizeName"
      ]
    # user: root # required for reading docker container logs
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./otel/otel-collector-opamp-config.yaml:/etc/manager-config.yaml
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=host.name=signoz-host,os.type=linux
    ports:
      # - "1777:1777"     # pprof extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      # - "8888:8888"     # OtelCollector internal metrics
      # - "8889:8889"     # signoz spanmetrics exposed by the agent
      # - "9411:9411"     # Zipkin port
      # - "13133:13133"   # health check extension
      # - "14250:14250"   # Jaeger gRPC
      # - "14268:14268"   # Jaeger thrift HTTP
      # - "55678:55678"   # OpenCensus receiver
      # - "55679:55679"   # zPages extension
    restart: on-failure
    depends_on:
      clickhouse:
        condition: service_healthy
      otel-collector-migrator:
        condition: service_completed_successfully
      query-service:
        condition: service_healthy

  logspout:
    image: "gliderlabs/logspout:v3.2.14"
    container_name: signoz-logspout
    volumes:
      - /etc/hostname:/etc/host_hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: syslog+tcp://otel-collector:2255
    depends_on:
      - otel-collector
    restart: on-failure

  query-service:
    image: signoz/query-service:${DOCKER_TAG:-0.37.2}
    container_name: signoz-query-service
    command:
      [
        "-config=/root/config/prometheus.yml",
        # "--prefer-delta=true"
      ]
    ports:
      - "6060:6060"     # pprof port
      - "8080:8080"     # query-service port
    volumes:
      - ./otel/prometheus.yml:/root/config/prometheus.yml
      # - ../dashboards:/root/config/dashboards
      - ./otel/data/signoz/:/var/lib/signoz/
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000/?database=signoz_traces
      - ALERTMANAGER_API_PREFIX=http://alertmanager:9093/api/
      - SIGNOZ_LOCAL_DB_PATH=/var/lib/signoz/signoz.db
      - DASHBOARDS_PATH=/root/config/dashboards
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=true
      - DEPLOYMENT_TYPE=docker-standalone-amd
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "-q",
          "localhost:8080/api/v1/health"
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      clickhouse:
        condition: service_healthy
      otel-collector-migrator:
        condition: service_completed_successfully

  signoz:
    image: signoz/frontend:${DOCKER_TAG:-0.37.2}
    container_name: signoz-frontend
    restart: on-failure
    depends_on:
      - alertmanager
      - query-service
    ports:
      - "3301:3301"
    volumes:
      - ./nginx/nginx-signoz.conf:/etc/nginx/conf.d/default.conf